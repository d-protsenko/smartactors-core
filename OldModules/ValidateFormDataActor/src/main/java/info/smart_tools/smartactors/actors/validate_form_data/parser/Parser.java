/* Generated By:JavaCC: Do not edit this line. Parser.java */
package info.smart_tools.smartactors.actors.validate_form_data.parser;

import java.io.Reader;
import java.io.StringReader;

public class Parser implements ParserConstants {

    private String field;  // the validating field.
    private boolean result = true;

    public Parser(String rules, String field)
    {
        this((Reader)(new StringReader(rules)));
        this.field = field;
    }

    public Boolean validate() {
        try {
            parse();
            return result;
        } catch (Exception e) {
            return false;
        }
    }

  final public void parse() throws ParseException {
    expression();
    jj_consume_token(0);
  }

  final public void expression() throws ParseException {
    queryTerm();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(AND);
      queryTerm();
    }
  }

  final public void queryTerm() throws ParseException {
    boolean b;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMPULSORY:
      t = jj_consume_token(COMPULSORY);
                     result &= field !="";
      break;
    case RUSSIAN:
      t = jj_consume_token(RUSSIAN);
                     result &= field.matches("[\u0410-\u044f\u0451][-\u0410-\u044f\u0401\u0451]+");
      break;
    case ADDRESS:
      t = jj_consume_token(ADDRESS);
                     result &= field.matches("^[0-9\u0430-\u044f\u0451\u005c\u005cs\u005c\u005c.,\u005c\u005c-;\u005c\u005c/\u005c\u005c(\u005c\u005c)]{1,255}$");
      break;
    case HOUSE:
      t = jj_consume_token(HOUSE);
                     result &= field.matches("^[0-9\u0430-\u044fa-z\u0451\u005c\u005c/]{1,7}$");
      break;
    case EMAIL:
      t = jj_consume_token(EMAIL);
                     result &= field.matches("^[_A-Za-z0-9-\u005c\u005c+]+(\u005c\u005c.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\u005c\u005c.[A-Za-z0-9]+)*(\u005c\u005c.[A-Za-z]{2,})$");
      break;
    case PASSWORD:
      t = jj_consume_token(PASSWORD);
                     result &= field.matches("^(?=.*[0-9])(?=.*[!@#$%^&*])[a-z0-9!@#$%^&*]{6,16}$");
      break;
    case NUMERIC:
      t = jj_consume_token(NUMERIC);
                     result &= field.matches("^\u005c\u005cd+$");
      break;
    case BARCODE:
      t = jj_consume_token(BARCODE);
                     result &= field.matches("^[0-9]{13}$");
      break;
    case ARTICUL:
      t = jj_consume_token(ARTICUL);
                     result &= field.matches("^[\u0430-\u044f\u04510-9.,\u005c\u005c/]{7,9}$");
      break;
    case PHONE:
      t = jj_consume_token(PHONE);
                     result &= field.matches("^\u005c\u005c+7\u005c\u005cs9[0-9]{9}$");
      break;
    case DIGITS:
      t = jj_consume_token(DIGITS);
                     result &= field.matches("^[0-9]+(([.,])[0-9]{1,2})?$");
      break;
    default:
      jj_la1[1] = jj_gen;
     result &= compareTerm();
    }
  }

  final public boolean compareTerm() throws ParseException {
        Token tComparand1, tComparator, tComparand2;
        double sComparand1, sComparand2;
        String sComparator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENGTH:
      tComparand1 = jj_consume_token(LENGTH);
                                  {sComparand1 = field.length();}
      break;
    case VALUE:
      tComparand1 = jj_consume_token(VALUE);
                                   sComparand1 = Double.parseDouble(field);
      break;
    case SUM:
      tComparand1 = jj_consume_token(SUM);
                                 sComparand1 = Double.parseDouble(field);
      break;
    case NUM_VALUE:
      tComparand1 = jj_consume_token(NUM_VALUE);
                                    sComparand1 = Double.parseDouble(tComparand1.toString());
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOREEQUALS:
      tComparator = jj_consume_token(MOREEQUALS);
                                    sComparator = tComparator.image;
      break;
    case LESSEQUALS:
      tComparator = jj_consume_token(LESSEQUALS);
                                    sComparator = tComparator.image;
      break;
    case LESSTHEN:
      tComparator = jj_consume_token(LESSTHEN);
                                  sComparator = tComparator.image;
      break;
    case MORETHEN:
      tComparator = jj_consume_token(MORETHEN);
                                  sComparator = tComparator.image;
      break;
    case EQUALS:
      tComparator = jj_consume_token(EQUALS);
                                sComparator = tComparator.image;
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALUE:
      tComparand2 = jj_consume_token(VALUE);
                                sComparand2 = Double.parseDouble(field);
      break;
    case SUM:
      tComparand2 = jj_consume_token(SUM);
                              sComparand2 = Double.parseDouble(field);
      break;
    case NUM_VALUE:
      tComparand2 = jj_consume_token(NUM_VALUE);
                                    sComparand2 = Double.parseDouble(tComparand2.toString());
      break;
    case LENGTH:
      tComparand2 = jj_consume_token(LENGTH);
                                  {sComparand2 = field.length();}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            if (sComparator.equals(">")) {{if (true) return (sComparand1 > sComparand2);}}
            if (sComparator.equals("<")) {{if (true) return (sComparand1 < sComparand2);}}
            if (sComparator.equals("<=")) {{if (true) return (sComparand1 <= sComparand2);}}
            if (sComparator.equals("=>")) {{if (true) return (sComparand1 >= sComparand2);}}
            if (sComparator.equals("==")) {{if (true) return (sComparand1 == sComparand2);}}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x1ffc0,0x1e0000,0x7c00000,0x1e0000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
